// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: online.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_online_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_online_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_online_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_online_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_online_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_online_2eproto_metadata_getter(int index);
namespace online {
class ReconBuffer;
struct ReconBufferDefaultTypeInternal;
extern ReconBufferDefaultTypeInternal _ReconBuffer_default_instance_;
class ReconRecord;
struct ReconRecordDefaultTypeInternal;
extern ReconRecordDefaultTypeInternal _ReconRecord_default_instance_;
class ReconRecords;
struct ReconRecordsDefaultTypeInternal;
extern ReconRecordsDefaultTypeInternal _ReconRecords_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace online
PROTOBUF_NAMESPACE_OPEN
template<> ::online::ReconBuffer* Arena::CreateMaybeMessage<::online::ReconBuffer>(Arena*);
template<> ::online::ReconRecord* Arena::CreateMaybeMessage<::online::ReconRecord>(Arena*);
template<> ::online::ReconRecords* Arena::CreateMaybeMessage<::online::ReconRecords>(Arena*);
template<> ::online::Request* Arena::CreateMaybeMessage<::online::Request>(Arena*);
template<> ::online::User* Arena::CreateMaybeMessage<::online::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace online {

// ===================================================================

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:online.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "online.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_online_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:online.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_online_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:online.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "online.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_online_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // repeated string arg = 1;
  int arg_size() const;
  private:
  int _internal_arg_size() const;
  public:
  void clear_arg();
  const std::string& arg(int index) const;
  std::string* mutable_arg(int index);
  void set_arg(int index, const std::string& value);
  void set_arg(int index, std::string&& value);
  void set_arg(int index, const char* value);
  void set_arg(int index, const char* value, size_t size);
  std::string* add_arg();
  void add_arg(const std::string& value);
  void add_arg(std::string&& value);
  void add_arg(const char* value);
  void add_arg(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arg();
  private:
  const std::string& _internal_arg(int index) const;
  std::string* _internal_add_arg();
  public:

  // @@protoc_insertion_point(class_scope:online.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_2eproto;
};
// -------------------------------------------------------------------

class ReconRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:online.ReconRecord) */ {
 public:
  inline ReconRecord() : ReconRecord(nullptr) {}
  virtual ~ReconRecord();
  explicit constexpr ReconRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconRecord(const ReconRecord& from);
  ReconRecord(ReconRecord&& from) noexcept
    : ReconRecord() {
    *this = ::std::move(from);
  }

  inline ReconRecord& operator=(const ReconRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconRecord& operator=(ReconRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconRecord* internal_default_instance() {
    return reinterpret_cast<const ReconRecord*>(
               &_ReconRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReconRecord& a, ReconRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconRecord* New() const final {
    return CreateMaybeMessage<ReconRecord>(nullptr);
  }

  ReconRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconRecord& from);
  void MergeFrom(const ReconRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "online.ReconRecord";
  }
  protected:
  explicit ReconRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_online_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string owner = 2;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:online.ReconRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_online_2eproto;
};
// -------------------------------------------------------------------

class ReconRecords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:online.ReconRecords) */ {
 public:
  inline ReconRecords() : ReconRecords(nullptr) {}
  virtual ~ReconRecords();
  explicit constexpr ReconRecords(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconRecords(const ReconRecords& from);
  ReconRecords(ReconRecords&& from) noexcept
    : ReconRecords() {
    *this = ::std::move(from);
  }

  inline ReconRecords& operator=(const ReconRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconRecords& operator=(ReconRecords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconRecords& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconRecords* internal_default_instance() {
    return reinterpret_cast<const ReconRecords*>(
               &_ReconRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReconRecords& a, ReconRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconRecords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconRecords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconRecords* New() const final {
    return CreateMaybeMessage<ReconRecords>(nullptr);
  }

  ReconRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconRecords& from);
  void MergeFrom(const ReconRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "online.ReconRecords";
  }
  protected:
  explicit ReconRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_online_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .online.ReconRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::online::ReconRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::online::ReconRecord >*
      mutable_records();
  private:
  const ::online::ReconRecord& _internal_records(int index) const;
  ::online::ReconRecord* _internal_add_records();
  public:
  const ::online::ReconRecord& records(int index) const;
  ::online::ReconRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::online::ReconRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:online.ReconRecords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::online::ReconRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_2eproto;
};
// -------------------------------------------------------------------

class ReconBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:online.ReconBuffer) */ {
 public:
  inline ReconBuffer() : ReconBuffer(nullptr) {}
  virtual ~ReconBuffer();
  explicit constexpr ReconBuffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconBuffer(const ReconBuffer& from);
  ReconBuffer(ReconBuffer&& from) noexcept
    : ReconBuffer() {
    *this = ::std::move(from);
  }

  inline ReconBuffer& operator=(const ReconBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconBuffer& operator=(ReconBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconBuffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconBuffer* internal_default_instance() {
    return reinterpret_cast<const ReconBuffer*>(
               &_ReconBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReconBuffer& a, ReconBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconBuffer* New() const final {
    return CreateMaybeMessage<ReconBuffer>(nullptr);
  }

  ReconBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconBuffer& from);
  void MergeFrom(const ReconBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "online.ReconBuffer";
  }
  protected:
  explicit ReconBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_online_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileBaseFieldNumber = 1,
    kObjContentFieldNumber = 2,
    kMtlContentFieldNumber = 3,
    kTextureContentFieldNumber = 4,
  };
  // string file_base = 1;
  bool has_file_base() const;
  private:
  bool _internal_has_file_base() const;
  public:
  void clear_file_base();
  const std::string& file_base() const;
  void set_file_base(const std::string& value);
  void set_file_base(std::string&& value);
  void set_file_base(const char* value);
  void set_file_base(const char* value, size_t size);
  std::string* mutable_file_base();
  std::string* release_file_base();
  void set_allocated_file_base(std::string* file_base);
  private:
  const std::string& _internal_file_base() const;
  void _internal_set_file_base(const std::string& value);
  std::string* _internal_mutable_file_base();
  public:

  // bytes obj_content = 2;
  bool has_obj_content() const;
  private:
  bool _internal_has_obj_content() const;
  public:
  void clear_obj_content();
  const std::string& obj_content() const;
  void set_obj_content(const std::string& value);
  void set_obj_content(std::string&& value);
  void set_obj_content(const char* value);
  void set_obj_content(const void* value, size_t size);
  std::string* mutable_obj_content();
  std::string* release_obj_content();
  void set_allocated_obj_content(std::string* obj_content);
  private:
  const std::string& _internal_obj_content() const;
  void _internal_set_obj_content(const std::string& value);
  std::string* _internal_mutable_obj_content();
  public:

  // bytes mtl_content = 3;
  bool has_mtl_content() const;
  private:
  bool _internal_has_mtl_content() const;
  public:
  void clear_mtl_content();
  const std::string& mtl_content() const;
  void set_mtl_content(const std::string& value);
  void set_mtl_content(std::string&& value);
  void set_mtl_content(const char* value);
  void set_mtl_content(const void* value, size_t size);
  std::string* mutable_mtl_content();
  std::string* release_mtl_content();
  void set_allocated_mtl_content(std::string* mtl_content);
  private:
  const std::string& _internal_mtl_content() const;
  void _internal_set_mtl_content(const std::string& value);
  std::string* _internal_mutable_mtl_content();
  public:

  // bytes texture_content = 4;
  bool has_texture_content() const;
  private:
  bool _internal_has_texture_content() const;
  public:
  void clear_texture_content();
  const std::string& texture_content() const;
  void set_texture_content(const std::string& value);
  void set_texture_content(std::string&& value);
  void set_texture_content(const char* value);
  void set_texture_content(const void* value, size_t size);
  std::string* mutable_texture_content();
  std::string* release_texture_content();
  void set_allocated_texture_content(std::string* texture_content);
  private:
  const std::string& _internal_texture_content() const;
  void _internal_set_texture_content(const std::string& value);
  std::string* _internal_mutable_texture_content();
  public:

  // @@protoc_insertion_point(class_scope:online.ReconBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mtl_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_content_;
  friend struct ::TableStruct_online_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int32 id = 1;
inline bool User::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool User::has_id() const {
  return _internal_has_id();
}
inline void User::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:online.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:online.User.id)
}

// string username = 2;
inline bool User::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User::has_username() const {
  return _internal_has_username();
}
inline void User::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:online.User.username)
  return _internal_username();
}
inline void User::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:online.User.username)
}
inline std::string* User::mutable_username() {
  // @@protoc_insertion_point(field_mutable:online.User.username)
  return _internal_mutable_username();
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.User.username)
}
inline void User::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.User.username)
}
inline std::string* User::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:online.User.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.User.username)
}

// string password = 3;
inline bool User::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User::has_password() const {
  return _internal_has_password();
}
inline void User::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:online.User.password)
  return _internal_password();
}
inline void User::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:online.User.password)
}
inline std::string* User::mutable_password() {
  // @@protoc_insertion_point(field_mutable:online.User.password)
  return _internal_mutable_password();
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.User.password)
}
inline void User::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.User.password)
}
inline std::string* User::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:online.User.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.User.password)
}

// -------------------------------------------------------------------

// Request

// repeated string arg = 1;
inline int Request::_internal_arg_size() const {
  return arg_.size();
}
inline int Request::arg_size() const {
  return _internal_arg_size();
}
inline void Request::clear_arg() {
  arg_.Clear();
}
inline std::string* Request::add_arg() {
  // @@protoc_insertion_point(field_add_mutable:online.Request.arg)
  return _internal_add_arg();
}
inline const std::string& Request::_internal_arg(int index) const {
  return arg_.Get(index);
}
inline const std::string& Request::arg(int index) const {
  // @@protoc_insertion_point(field_get:online.Request.arg)
  return _internal_arg(index);
}
inline std::string* Request::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:online.Request.arg)
  return arg_.Mutable(index);
}
inline void Request::set_arg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:online.Request.arg)
  arg_.Mutable(index)->assign(value);
}
inline void Request::set_arg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:online.Request.arg)
  arg_.Mutable(index)->assign(std::move(value));
}
inline void Request::set_arg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:online.Request.arg)
}
inline void Request::set_arg(int index, const char* value, size_t size) {
  arg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:online.Request.arg)
}
inline std::string* Request::_internal_add_arg() {
  return arg_.Add();
}
inline void Request::add_arg(const std::string& value) {
  arg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:online.Request.arg)
}
inline void Request::add_arg(std::string&& value) {
  arg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:online.Request.arg)
}
inline void Request::add_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:online.Request.arg)
}
inline void Request::add_arg(const char* value, size_t size) {
  arg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:online.Request.arg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::arg() const {
  // @@protoc_insertion_point(field_list:online.Request.arg)
  return arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:online.Request.arg)
  return &arg_;
}

// -------------------------------------------------------------------

// ReconRecord

// int32 id = 1;
inline bool ReconRecord::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReconRecord::has_id() const {
  return _internal_has_id();
}
inline void ReconRecord::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconRecord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconRecord::id() const {
  // @@protoc_insertion_point(field_get:online.ReconRecord.id)
  return _internal_id();
}
inline void ReconRecord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ReconRecord::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:online.ReconRecord.id)
}

// string owner = 2;
inline bool ReconRecord::_internal_has_owner() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReconRecord::has_owner() const {
  return _internal_has_owner();
}
inline void ReconRecord::clear_owner() {
  owner_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReconRecord::owner() const {
  // @@protoc_insertion_point(field_get:online.ReconRecord.owner)
  return _internal_owner();
}
inline void ReconRecord::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:online.ReconRecord.owner)
}
inline std::string* ReconRecord::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:online.ReconRecord.owner)
  return _internal_mutable_owner();
}
inline const std::string& ReconRecord::_internal_owner() const {
  return owner_.Get();
}
inline void ReconRecord::_internal_set_owner(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconRecord::set_owner(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconRecord.owner)
}
inline void ReconRecord::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconRecord.owner)
}
inline void ReconRecord::set_owner(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconRecord.owner)
}
inline std::string* ReconRecord::_internal_mutable_owner() {
  _has_bits_[0] |= 0x00000001u;
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconRecord::release_owner() {
  // @@protoc_insertion_point(field_release:online.ReconRecord.owner)
  if (!_internal_has_owner()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return owner_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconRecord::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconRecord.owner)
}

// string name = 3;
inline bool ReconRecord::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReconRecord::has_name() const {
  return _internal_has_name();
}
inline void ReconRecord::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReconRecord::name() const {
  // @@protoc_insertion_point(field_get:online.ReconRecord.name)
  return _internal_name();
}
inline void ReconRecord::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:online.ReconRecord.name)
}
inline std::string* ReconRecord::mutable_name() {
  // @@protoc_insertion_point(field_mutable:online.ReconRecord.name)
  return _internal_mutable_name();
}
inline const std::string& ReconRecord::_internal_name() const {
  return name_.Get();
}
inline void ReconRecord::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconRecord::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconRecord.name)
}
inline void ReconRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconRecord.name)
}
inline void ReconRecord::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconRecord.name)
}
inline std::string* ReconRecord::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconRecord::release_name() {
  // @@protoc_insertion_point(field_release:online.ReconRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconRecord.name)
}

// -------------------------------------------------------------------

// ReconRecords

// repeated .online.ReconRecord records = 1;
inline int ReconRecords::_internal_records_size() const {
  return records_.size();
}
inline int ReconRecords::records_size() const {
  return _internal_records_size();
}
inline void ReconRecords::clear_records() {
  records_.Clear();
}
inline ::online::ReconRecord* ReconRecords::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:online.ReconRecords.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::online::ReconRecord >*
ReconRecords::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:online.ReconRecords.records)
  return &records_;
}
inline const ::online::ReconRecord& ReconRecords::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::online::ReconRecord& ReconRecords::records(int index) const {
  // @@protoc_insertion_point(field_get:online.ReconRecords.records)
  return _internal_records(index);
}
inline ::online::ReconRecord* ReconRecords::_internal_add_records() {
  return records_.Add();
}
inline ::online::ReconRecord* ReconRecords::add_records() {
  // @@protoc_insertion_point(field_add:online.ReconRecords.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::online::ReconRecord >&
ReconRecords::records() const {
  // @@protoc_insertion_point(field_list:online.ReconRecords.records)
  return records_;
}

// -------------------------------------------------------------------

// ReconBuffer

// string file_base = 1;
inline bool ReconBuffer::_internal_has_file_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReconBuffer::has_file_base() const {
  return _internal_has_file_base();
}
inline void ReconBuffer::clear_file_base() {
  file_base_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReconBuffer::file_base() const {
  // @@protoc_insertion_point(field_get:online.ReconBuffer.file_base)
  return _internal_file_base();
}
inline void ReconBuffer::set_file_base(const std::string& value) {
  _internal_set_file_base(value);
  // @@protoc_insertion_point(field_set:online.ReconBuffer.file_base)
}
inline std::string* ReconBuffer::mutable_file_base() {
  // @@protoc_insertion_point(field_mutable:online.ReconBuffer.file_base)
  return _internal_mutable_file_base();
}
inline const std::string& ReconBuffer::_internal_file_base() const {
  return file_base_.Get();
}
inline void ReconBuffer::_internal_set_file_base(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconBuffer::set_file_base(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_base_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconBuffer.file_base)
}
inline void ReconBuffer::set_file_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconBuffer.file_base)
}
inline void ReconBuffer::set_file_base(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconBuffer.file_base)
}
inline std::string* ReconBuffer::_internal_mutable_file_base() {
  _has_bits_[0] |= 0x00000001u;
  return file_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconBuffer::release_file_base() {
  // @@protoc_insertion_point(field_release:online.ReconBuffer.file_base)
  if (!_internal_has_file_base()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_base_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconBuffer::set_allocated_file_base(std::string* file_base) {
  if (file_base != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_base,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconBuffer.file_base)
}

// bytes obj_content = 2;
inline bool ReconBuffer::_internal_has_obj_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReconBuffer::has_obj_content() const {
  return _internal_has_obj_content();
}
inline void ReconBuffer::clear_obj_content() {
  obj_content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReconBuffer::obj_content() const {
  // @@protoc_insertion_point(field_get:online.ReconBuffer.obj_content)
  return _internal_obj_content();
}
inline void ReconBuffer::set_obj_content(const std::string& value) {
  _internal_set_obj_content(value);
  // @@protoc_insertion_point(field_set:online.ReconBuffer.obj_content)
}
inline std::string* ReconBuffer::mutable_obj_content() {
  // @@protoc_insertion_point(field_mutable:online.ReconBuffer.obj_content)
  return _internal_mutable_obj_content();
}
inline const std::string& ReconBuffer::_internal_obj_content() const {
  return obj_content_.Get();
}
inline void ReconBuffer::_internal_set_obj_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obj_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconBuffer::set_obj_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  obj_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconBuffer.obj_content)
}
inline void ReconBuffer::set_obj_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  obj_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconBuffer.obj_content)
}
inline void ReconBuffer::set_obj_content(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  obj_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconBuffer.obj_content)
}
inline std::string* ReconBuffer::_internal_mutable_obj_content() {
  _has_bits_[0] |= 0x00000002u;
  return obj_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconBuffer::release_obj_content() {
  // @@protoc_insertion_point(field_release:online.ReconBuffer.obj_content)
  if (!_internal_has_obj_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return obj_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconBuffer::set_allocated_obj_content(std::string* obj_content) {
  if (obj_content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obj_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconBuffer.obj_content)
}

// bytes mtl_content = 3;
inline bool ReconBuffer::_internal_has_mtl_content() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReconBuffer::has_mtl_content() const {
  return _internal_has_mtl_content();
}
inline void ReconBuffer::clear_mtl_content() {
  mtl_content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReconBuffer::mtl_content() const {
  // @@protoc_insertion_point(field_get:online.ReconBuffer.mtl_content)
  return _internal_mtl_content();
}
inline void ReconBuffer::set_mtl_content(const std::string& value) {
  _internal_set_mtl_content(value);
  // @@protoc_insertion_point(field_set:online.ReconBuffer.mtl_content)
}
inline std::string* ReconBuffer::mutable_mtl_content() {
  // @@protoc_insertion_point(field_mutable:online.ReconBuffer.mtl_content)
  return _internal_mutable_mtl_content();
}
inline const std::string& ReconBuffer::_internal_mtl_content() const {
  return mtl_content_.Get();
}
inline void ReconBuffer::_internal_set_mtl_content(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mtl_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconBuffer::set_mtl_content(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mtl_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconBuffer.mtl_content)
}
inline void ReconBuffer::set_mtl_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mtl_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconBuffer.mtl_content)
}
inline void ReconBuffer::set_mtl_content(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mtl_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconBuffer.mtl_content)
}
inline std::string* ReconBuffer::_internal_mutable_mtl_content() {
  _has_bits_[0] |= 0x00000004u;
  return mtl_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconBuffer::release_mtl_content() {
  // @@protoc_insertion_point(field_release:online.ReconBuffer.mtl_content)
  if (!_internal_has_mtl_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mtl_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconBuffer::set_allocated_mtl_content(std::string* mtl_content) {
  if (mtl_content != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mtl_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mtl_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconBuffer.mtl_content)
}

// bytes texture_content = 4;
inline bool ReconBuffer::_internal_has_texture_content() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReconBuffer::has_texture_content() const {
  return _internal_has_texture_content();
}
inline void ReconBuffer::clear_texture_content() {
  texture_content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ReconBuffer::texture_content() const {
  // @@protoc_insertion_point(field_get:online.ReconBuffer.texture_content)
  return _internal_texture_content();
}
inline void ReconBuffer::set_texture_content(const std::string& value) {
  _internal_set_texture_content(value);
  // @@protoc_insertion_point(field_set:online.ReconBuffer.texture_content)
}
inline std::string* ReconBuffer::mutable_texture_content() {
  // @@protoc_insertion_point(field_mutable:online.ReconBuffer.texture_content)
  return _internal_mutable_texture_content();
}
inline const std::string& ReconBuffer::_internal_texture_content() const {
  return texture_content_.Get();
}
inline void ReconBuffer::_internal_set_texture_content(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  texture_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReconBuffer::set_texture_content(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  texture_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:online.ReconBuffer.texture_content)
}
inline void ReconBuffer::set_texture_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  texture_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:online.ReconBuffer.texture_content)
}
inline void ReconBuffer::set_texture_content(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  texture_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:online.ReconBuffer.texture_content)
}
inline std::string* ReconBuffer::_internal_mutable_texture_content() {
  _has_bits_[0] |= 0x00000008u;
  return texture_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReconBuffer::release_texture_content() {
  // @@protoc_insertion_point(field_release:online.ReconBuffer.texture_content)
  if (!_internal_has_texture_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return texture_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconBuffer::set_allocated_texture_content(std::string* texture_content) {
  if (texture_content != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  texture_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:online.ReconBuffer.texture_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace online

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_online_2eproto
